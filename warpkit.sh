#!/bin/bash

# WarpKit - LinuxÊúçÂä°ËøêÁª¥Â∑•ÂÖ∑
# Author: Claude Code Assistant

set -euo pipefail

# ËÆæÁΩÆUTF-8ÁºñÁ†ÅÊîØÊåÅ‰∏≠Êñá
export LANG=C.UTF-8
export LC_ALL=C.UTF-8

# È¢úËâ≤ÂÆö‰πâ
declare -r RED='\033[0;31m'
declare -r GREEN='\033[0;32m'
declare -r YELLOW='\033[0;33m'
declare -r BLUE='\033[0;34m'
declare -r PURPLE='\033[0;35m'
declare -r CYAN='\033[0;36m'
declare -r WHITE='\033[0;37m'
declare -r BOLD='\033[1m'
declare -r NC='\033[0m' # No Color

# ÂÖ®Â±ÄÂèòÈáè
declare -g CURRENT_SELECTION=0
declare -g MENU_OPTIONS=()
declare -g DISTRO=""
declare -g VERSION=""
declare -g KERNEL=""
declare -g ARCH=""
declare -g DEBUG_MODE=false

# Ê®°ÂùóÂåñÁõ∏ÂÖ≥ÂèòÈáè
declare -g WARPKIT_MODULES_DIR=""
declare -g LOADED_MODULES=()
declare -g AVAILABLE_MODULES=()

# Êõ¥Êñ∞Áõ∏ÂÖ≥ÂèòÈáè
declare -r GITHUB_REPO="marvinli001/warpkit"
declare -r CONFIG_DIR="$HOME/.config/warpkit"
declare -r CACHE_DIR="$HOME/.cache/warpkit"
declare -r UPDATE_CHECK_FILE="$CACHE_DIR/last_update_check"

# Ëé∑ÂèñÂΩìÂâçËÑöÊú¨ÁöÑÁâàÊú¨
get_current_version() {
    local script_dir=$(dirname "$(readlink -f "$0")")
    local version_file="$CONFIG_DIR/current_version"

    # È¶ñÂÖàÊ£ÄÊü•ÊòØÂê¶ÊúâÂ≠òÂÇ®ÁöÑÁâàÊú¨‰ø°ÊÅØ
    if [[ -f "$version_file" ]]; then
        cat "$version_file" 2>/dev/null || echo "unknown"
        return
    fi

    # Ê£ÄÊü•ËÑöÊú¨ÊâÄÂú®ÁõÆÂΩïÊòØÂê¶ÊòØgit‰ªìÂ∫ì
    if cd "$script_dir" 2>/dev/null && git rev-parse --git-dir >/dev/null 2>&1; then
        # Ëé∑ÂèñÂΩìÂâçËÑöÊú¨Êñá‰ª∂ÁöÑÊúÄÂêé‰øÆÊîπcommit
        local script_file=$(basename "$0")
        local version=$(git log -1 --format="%h" -- "$script_file" 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
        if [[ -n "$version" ]]; then
            # Â≠òÂÇ®ÁâàÊú¨‰ø°ÊÅØ
            mkdir -p "$CONFIG_DIR"
            echo "$version" > "$version_file"
            echo "$version"
        else
            echo "unknown"
        fi
    else
        echo "unknown"
    fi
}

# ‰øùÂ≠òÂΩìÂâçÁâàÊú¨‰ø°ÊÅØ
save_current_version() {
    local version="$1"
    local version_file="$CONFIG_DIR/current_version"

    mkdir -p "$CONFIG_DIR"
    echo "$version" > "$version_file"
}

# ÊâìÂç∞Logo
print_logo() {
    clear
    echo -e "${CYAN}${BOLD}"
    echo "‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo "‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù"
    echo "‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   "
    echo "‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   "
    echo "‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   "
    echo " ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   "
    echo -e "${NC}"
    echo -e "${YELLOW}WarpKit $(get_current_version)${NC}"
    echo ""
}

# Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞Ê£ÄÊµãÔºàÊØèÊó•È¶ñÊ¨°ËøêË°åÔºâ
should_check_update() {
    local today=$(date +%Y-%m-%d)

    # ÂàõÂª∫ÁºìÂ≠òÁõÆÂΩïÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®Ôºâ
    mkdir -p "$CACHE_DIR"

    # Â¶ÇÊûúÊ≤°ÊúâÊ£ÄÊü•ËÆ∞ÂΩïÊñá‰ª∂ÔºåÂàôÈúÄË¶ÅÊ£ÄÊü•
    if [[ ! -f "$UPDATE_CHECK_FILE" ]]; then
        return 0
    fi

    # ËØªÂèñ‰∏äÊ¨°Ê£ÄÊü•Êó•Êúü
    local last_check_date=$(cat "$UPDATE_CHECK_FILE" 2>/dev/null || echo "")

    # Â¶ÇÊûúÊó•Êúü‰∏çÂêåÔºåÈúÄË¶ÅÊ£ÄÊü•Êõ¥Êñ∞
    if [[ "$last_check_date" != "$today" ]]; then
        return 0
    fi

    return 1
}

# ËÆ∞ÂΩïÊõ¥Êñ∞Ê£ÄÊü•Êó∂Èó¥
record_update_check() {
    local today=$(date +%Y-%m-%d)
    echo "$today" > "$UPDATE_CHECK_FILE"
}

# Ëé∑ÂèñGitHubÊúÄÊñ∞commit hash
get_latest_commit() {
    local latest_commit=""

    # Â∞ùËØï‰ΩøÁî®curlËé∑ÂèñÊúÄÊñ∞commit
    if command -v curl >/dev/null 2>&1; then
        latest_commit=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/commits/master" | grep '"sha"' | head -1 | cut -d'"' -f4 | cut -c1-7 2>/dev/null)
    # Â¶ÇÊûúÊ≤°ÊúâcurlÔºåÂ∞ùËØïwget
    elif command -v wget >/dev/null 2>&1; then
        latest_commit=$(wget -qO- "https://api.github.com/repos/$GITHUB_REPO/commits/master" | grep '"sha"' | head -1 | cut -d'"' -f4 | cut -c1-7 2>/dev/null)
    fi

    echo "$latest_commit"
}

# ÊØîËæÉcommit hash
commit_compare() {
    local current="$1"
    local latest="$2"

    # Â¶ÇÊûúcommit hashÁõ∏ÂêåÔºåËøîÂõû1Ôºà‰∏çÈúÄË¶ÅÊõ¥Êñ∞Ôºâ
    if [[ "$current" == "$latest" ]]; then
        return 1
    fi

    # Â¶ÇÊûúÂΩìÂâçÁâàÊú¨ÊòØunknownÔºåÂàôÈúÄË¶ÅÊõ¥Êñ∞
    if [[ "$current" == "unknown" ]]; then
        return 0
    fi

    # Â¶ÇÊûúËé∑Âèñ‰∏çÂà∞ÊúÄÊñ∞commitÔºåËøîÂõû1Ôºà‰∏çÊõ¥Êñ∞Ôºâ
    if [[ -z "$latest" ]]; then
        return 1
    fi

    # commit hash‰∏çÂêåÔºåÈúÄË¶ÅÊõ¥Êñ∞
    return 0
}

# Ê£ÄÊü•Êõ¥Êñ∞
check_for_updates() {
    local force_check=${1:-false}

    # Â¶ÇÊûú‰∏çÊòØÂº∫Âà∂Ê£ÄÊü•‰∏î‰∏çÈúÄË¶ÅÊ£ÄÊü•Êõ¥Êñ∞ÔºåÂàôË∑≥Ëøá
    if [[ "$force_check" != "true" ]] && ! should_check_update; then
        return
    fi

    echo -e "${YELLOW}üîç Ê£ÄÊü•Êõ¥Êñ∞‰∏≠...${NC}" >&2

    local current_commit=$(get_current_version)
    local latest_commit=$(get_latest_commit)

    if [[ -z "$latest_commit" ]]; then
        if [[ "$force_check" == "true" ]]; then
            echo -e "${RED}‚ùå Êó†Ê≥ïËé∑ÂèñÊúÄÊñ∞ÁâàÊú¨‰ø°ÊÅØÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•${NC}" >&2
        fi
        return
    fi

    if commit_compare "$current_commit" "$latest_commit"; then
        echo -e "${GREEN}üéâ ÂèëÁé∞Êñ∞ÁâàÊú¨ $latest_commitÔºàÂΩìÂâçÁâàÊú¨ $current_commitÔºâ${NC}" >&2
        echo -e "${CYAN}ÊòØÂê¶Áé∞Âú®Êõ¥Êñ∞Ôºü [y/N] ${NC}" >&2
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            perform_update "$latest_commit"
        fi
    else
        if [[ "$force_check" == "true" ]]; then
            echo -e "${GREEN}‚úÖ Â∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨ $current_commit${NC}" >&2
        fi
    fi

    # ËÆ∞ÂΩïÊ£ÄÊü•Êó∂Èó¥
    record_update_check
}

# ÊâßË°åÊõ¥Êñ∞
perform_update() {
    local new_version="$1"
    local script_path="$(readlink -f "$0")"
    local backup_path="${script_path}.backup.$(date +%Y%m%d_%H%M%S)"

    echo -e "${YELLOW}üì¶ ÂºÄÂßãÊõ¥Êñ∞Âà∞ $new_version...${NC}"

    # Â§á‰ªΩÂΩìÂâçËÑöÊú¨
    echo -e "${BLUE}üìã Â§á‰ªΩÂΩìÂâçÁâàÊú¨...${NC}"
    cp "$script_path" "$backup_path"

    # ‰∏ãËΩΩÊñ∞ÁâàÊú¨‰∏ªËÑöÊú¨
    echo -e "${BLUE}‚¨áÔ∏è ‰∏ãËΩΩ‰∏ªÁ®ãÂ∫è...${NC}"
    local temp_file="/tmp/warpkit_update.sh"

    if command -v curl >/dev/null 2>&1; then
        if ! curl -fsSL "https://raw.githubusercontent.com/$GITHUB_REPO/master/warpkit.sh" -o "$temp_file"; then
            echo -e "${RED}‚ùå ‰∏ªÁ®ãÂ∫è‰∏ãËΩΩÂ§±Ë¥•${NC}"
            return 1
        fi
    elif command -v wget >/dev/null 2>&1; then
        if ! wget -qO "$temp_file" "https://raw.githubusercontent.com/$GITHUB_REPO/master/warpkit.sh"; then
            echo -e "${RED}‚ùå ‰∏ªÁ®ãÂ∫è‰∏ãËΩΩÂ§±Ë¥•${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå ÈúÄË¶Å curl Êàñ wget Êù•‰∏ãËΩΩÊõ¥Êñ∞${NC}"
        return 1
    fi

    # È™åËØÅ‰∏ãËΩΩÁöÑÊñá‰ª∂
    if [[ ! -s "$temp_file" ]]; then
        echo -e "${RED}‚ùå ‰∏ãËΩΩÁöÑ‰∏ªÁ®ãÂ∫èÊñá‰ª∂Êó†Êïà${NC}"
        rm -f "$temp_file"
        return 1
    fi

    # Êõ¥Êñ∞Ê®°ÂùóÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
    update_modules

    # ÊõøÊç¢ÂΩìÂâçËÑöÊú¨
    echo -e "${BLUE}üîÑ ÂÆâË£ÖÊñ∞ÁâàÊú¨...${NC}"
    if cp "$temp_file" "$script_path" && chmod +x "$script_path"; then
        rm -f "$temp_file"
        # ‰øùÂ≠òÊñ∞ÁâàÊú¨‰ø°ÊÅØ
        save_current_version "$new_version"
        echo -e "${GREEN}‚úÖ Êõ¥Êñ∞ÊàêÂäüÔºÅÂ∑≤Êõ¥Êñ∞Âà∞ $new_version${NC}"
        echo -e "${YELLOW}Â§á‰ªΩÊñá‰ª∂‰øùÂ≠òÂú®: $backup_path${NC}"
        echo -e "${CYAN}ËØ∑ÈáçÊñ∞ËøêË°å warpkit ‰ª•‰ΩøÁî®Êñ∞ÁâàÊú¨${NC}"
        echo ""
        echo "Êåâ‰ªªÊÑèÈîÆÈÄÄÂá∫..."
        restore_terminal_state
        read -n1
        exit 0
    else
        echo -e "${RED}‚ùå Êõ¥Êñ∞Â§±Ë¥•ÔºåÊ≠£Âú®ÊÅ¢Â§çÂ§á‰ªΩ...${NC}"
        cp "$backup_path" "$script_path"
        rm -f "$temp_file"
        return 1
    fi
}

# Êõ¥Êñ∞Ê®°Âùó
update_modules() {
    # Ê£ÄÊµãÊ®°ÂùóÂÆâË£ÖË∑ØÂæÑ
    local module_dirs=(
        "/usr/local/lib/warpkit/modules"
        "$HOME/.local/lib/warpkit/modules"
    )

    local modules_dir=""
    for dir in "${module_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            modules_dir="$dir"
            break
        fi
    done

    # Â¶ÇÊûúÊú™ÊâæÂà∞Ê®°ÂùóÁõÆÂΩïÔºåÁõ¥Êé•ËøîÂõû
    if [[ -z "$modules_dir" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Êú™ÊâæÂà∞Ê®°ÂùóÁõÆÂΩïÔºåË∑≥ËøáÊ®°ÂùóÊõ¥Êñ∞${NC}"
        return 0
    fi

    # Á°Æ‰øùÊ®°ÂùóÁõÆÂΩïÊúâÊïà
    if [[ ! -d "$modules_dir" || ! -w "$modules_dir" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Ê®°ÂùóÁõÆÂΩïÊó†ÊïàÊàñÊó†ÂÜôÂÖ•ÊùÉÈôêÔºåË∑≥ËøáÊ®°ÂùóÊõ¥Êñ∞${NC}"
        return 0
    fi

    echo -e "${BLUE}‚¨áÔ∏è Êõ¥Êñ∞Ê®°Âùó...${NC}"

    # ÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩï
    local temp_modules_dir="/tmp/warpkit_modules_update"
    mkdir -p "$temp_modules_dir"

    # ‰∏ãËΩΩÊ®°ÂùóÊñá‰ª∂
    local modules=("system.sh" "packages.sh" "network.sh" "logs.sh")
    local download_success=true

    for module in "${modules[@]}"; do
        echo -e "${CYAN}  ‰∏ãËΩΩ $module...${NC}"
        if command -v curl >/dev/null 2>&1; then
            if ! curl -fsSL "https://raw.githubusercontent.com/$GITHUB_REPO/master/modules/$module" -o "$temp_modules_dir/$module"; then
                echo -e "${YELLOW}  ‚ö†Ô∏è $module ‰∏ãËΩΩÂ§±Ë¥•${NC}"
                download_success=false
            fi
        elif command -v wget >/dev/null 2>&1; then
            if ! wget -qO "$temp_modules_dir/$module" "https://raw.githubusercontent.com/$GITHUB_REPO/master/modules/$module"; then
                echo -e "${YELLOW}  ‚ö†Ô∏è $module ‰∏ãËΩΩÂ§±Ë¥•${NC}"
                download_success=false
            fi
        fi
    done

    if [[ "$download_success" == "true" ]]; then
        # Â§á‰ªΩÁé∞ÊúâÊ®°Âùó
        if [[ -d "$modules_dir" ]]; then
            local modules_backup="${modules_dir}.backup.$(date +%Y%m%d_%H%M%S)"
            if ! cp -r "$modules_dir" "$modules_backup" 2>/dev/null; then
                echo -e "${YELLOW}‚ö†Ô∏è Â§á‰ªΩÊ®°ÂùóÂ§±Ë¥•ÔºåÁªßÁª≠Êõ¥Êñ∞${NC}"
            fi
        fi

        # ÂÆâË£ÖÊñ∞Ê®°ÂùóÔºàÂ∏¶ÈîôËØØÊ£ÄÊü•Ôºâ
        local install_failed=false
        for module_file in "$temp_modules_dir"/*.sh; do
            if [[ -f "$module_file" ]]; then
                local module_name=$(basename "$module_file")
                if cp "$module_file" "$modules_dir/" 2>/dev/null; then
                    chmod +x "$modules_dir/$module_name" 2>/dev/null || true
                else
                    echo -e "${YELLOW}  ‚ö†Ô∏è ÂÆâË£Ö $module_name Â§±Ë¥•${NC}"
                    install_failed=true
                fi
            fi
        done

        if [[ "$install_failed" == "false" ]]; then
            echo -e "${GREEN}‚úÖ Ê®°ÂùóÊõ¥Êñ∞ÂÆåÊàê${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è ÈÉ®ÂàÜÊ®°ÂùóÂÆâË£ÖÂ§±Ë¥•${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è ÈÉ®ÂàÜÊ®°ÂùóÊõ¥Êñ∞Â§±Ë¥•Ôºå‰ΩÜ‰∏ªÁ®ãÂ∫èÊõ¥Êñ∞Â∞ÜÁªßÁª≠${NC}"
    fi

    # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
    rm -rf "$temp_modules_dir"
}

# Ê£ÄÊµãLinuxÂèëË°åÁâà
detect_distro() {
    # È¶ñÂÖàÂ∞ùËØï‰ªé /etc/os-release Ëé∑Âèñ‰ø°ÊÅØÔºàÊúÄÊ†áÂáÜÁöÑÊñπÊ≥ïÔºâ
    if [[ -f /etc/os-release ]]; then
        # ‰ΩøÁî®Â≠êshellÈÅøÂÖçÊ±°ÊüìÂΩìÂâçÁéØÂ¢É
        local os_info
        os_info=$(source /etc/os-release 2>/dev/null && echo "$ID|${VERSION_ID:-$VERSION}")
        DISTRO=$(echo "$os_info" | cut -d'|' -f1)
        VERSION=$(echo "$os_info" | cut -d'|' -f2)

    # Ubuntu/Debian Á≥ªÁªüÁöÑ lsb-release
    elif [[ -f /etc/lsb-release ]]; then
        # ‰ΩøÁî®Â≠êshellÈÅøÂÖçÊ±°ÊüìÂΩìÂâçÁéØÂ¢É
        local lsb_info
        lsb_info=$(source /etc/lsb-release 2>/dev/null && echo "$DISTRIB_ID|$DISTRIB_RELEASE")
        DISTRO=$(echo "$lsb_info" | cut -d'|' -f1 | tr '[:upper:]' '[:lower:]')
        VERSION=$(echo "$lsb_info" | cut -d'|' -f2)

    # Red Hat Á≥ªÂàó
    elif [[ -f /etc/redhat-release ]]; then
        if grep -qi "centos" /etc/redhat-release; then
            DISTRO="centos"
        elif grep -qi "red hat" /etc/redhat-release; then
            DISTRO="rhel"
        elif grep -qi "fedora" /etc/redhat-release; then
            DISTRO="fedora"
        else
            DISTRO="rhel"
        fi
        VERSION=$(grep -oE '[0-9]+(\.[0-9]+)?' /etc/redhat-release | head -1)

    # SUSE Á≥ªÂàó
    elif [[ -f /etc/SuSE-release ]]; then
        DISTRO="suse"
        VERSION=$(grep -i version /etc/SuSE-release | grep -oE '[0-9]+(\.[0-9]+)?')

    # Arch Linux
    elif [[ -f /etc/arch-release ]]; then
        DISTRO="arch"
        VERSION="rolling"

    # Alpine Linux
    elif [[ -f /etc/alpine-release ]]; then
        DISTRO="alpine"
        VERSION=$(cat /etc/alpine-release)

    # Gentoo
    elif [[ -f /etc/gentoo-release ]]; then
        DISTRO="gentoo"
        VERSION=$(cat /etc/gentoo-release | grep -oE '[0-9]+(\.[0-9]+)?')

    # Debian
    elif [[ -f /etc/debian_version ]]; then
        DISTRO="debian"
        VERSION=$(cat /etc/debian_version)

    # ÈÄöËøá uname Â∞ùËØïÊ£ÄÊµã
    elif command -v uname >/dev/null 2>&1; then
        local uname_output=$(uname -a | tr '[:upper:]' '[:lower:]')
        if [[ $uname_output == *"ubuntu"* ]]; then
            DISTRO="ubuntu"
        elif [[ $uname_output == *"debian"* ]]; then
            DISTRO="debian"
        elif [[ $uname_output == *"centos"* ]]; then
            DISTRO="centos"
        elif [[ $uname_output == *"red hat"* ]]; then
            DISTRO="rhel"
        else
            DISTRO="unknown"
        fi
        VERSION="unknown"
    else
        DISTRO="unknown"
        VERSION="unknown"
    fi

    # Ëé∑ÂèñÂÜÖÊ†∏ÂíåÊû∂ÊûÑ‰ø°ÊÅØ
    KERNEL=$(uname -r 2>/dev/null || echo "unknown")
    ARCH=$(uname -m 2>/dev/null || echo "unknown")

    # ËßÑËåÉÂåñÂèëË°åÁâàÂêçÁß∞
    case "$DISTRO" in
        "ubuntu"|"debian"|"centos"|"rhel"|"fedora"|"arch"|"suse"|"opensuse"|"alpine"|"gentoo")
            # Â∑≤Áü•ÁöÑÂèëË°åÁâàÔºå‰øùÊåÅÂéüÊ†∑
            ;;
        *)
            # Êú™Áü•ÂèëË°åÁâàÔºåÂ∞ùËØï‰ªé ID_LIKE Ëé∑ÂèñÂÖºÂÆπ‰ø°ÊÅØ
            if [[ -f /etc/os-release ]]; then
                local id_like
                id_like=$(source /etc/os-release 2>/dev/null && echo "${ID_LIKE:-}")
                if [[ -n "$id_like" ]]; then
                    DISTRO="$id_like"
                fi
            fi
            ;;
    esac
}

# ÊòæÁ§∫Á≥ªÁªü‰ø°ÊÅØ
show_system_info() {
    echo -e "${BOLD}${BLUE}Á≥ªÁªü‰ø°ÊÅØ:${NC}"
    echo -e "  ÂèëË°åÁâà: ${GREEN}$DISTRO $VERSION${NC}"
    echo -e "  ÂÜÖÊ†∏ÁâàÊú¨: ${GREEN}$KERNEL${NC}"
    echo -e "  Êû∂ÊûÑ: ${GREEN}$ARCH${NC}"
    echo ""
}

# Âä®ÊÄÅËøõÂ∫¶Êù°ÊòæÁ§∫
show_progress() {
    local current=$1
    local total=$2
    local message=${3:-"Â§ÑÁêÜ‰∏≠"}
    local width=50

    local percentage=$((current * 100 / total))
    local completed=$((current * width / total))
    local remaining=$((width - completed))

    printf "\r${CYAN}%s: [" "$message"
    printf "%${completed}s" | tr ' ' '‚ñì'
    printf "%${remaining}s" | tr ' ' '‚ñë'
    printf "] %d%% (%d/%d)${NC}" "$percentage" "$current" "$total"

    if [[ $current -eq $total ]]; then
        echo ""
    fi
}

# Âä†ËΩΩÂä®Áîª
loading_animation() {
    local message=${1:-"Âä†ËΩΩ‰∏≠"}
    local duration=${2:-3}
    local chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"

    local end_time=$((SECONDS + duration))

    while [[ $SECONDS -lt $end_time ]]; do
        for (( i=0; i<${#chars}; i++ )); do
            printf "\r${YELLOW}%s %s${NC}" "${chars:$i:1}" "$message"
            sleep 0.1
            if [[ $SECONDS -ge $end_time ]]; then
                break 2
            fi
        done
    done
    printf "\r%s ‚úì %s ÂÆåÊàê!${NC}\n" "${GREEN}" "$message"
}

# Âä®ÊÄÅÁä∂ÊÄÅÊõ¥Êñ∞
update_status() {
    local status=$1
    local message=$2
    local timestamp=$(date '+%H:%M:%S')

    case "$status" in
        "info")
            echo -e "${BLUE}[${timestamp}] ‚ÑπÔ∏è  ${message}${NC}"
            ;;
        "success")
            echo -e "${GREEN}[${timestamp}] ‚úÖ ${message}${NC}"
            ;;
        "warning")
            echo -e "${YELLOW}[${timestamp}] ‚ö†Ô∏è  ${message}${NC}"
            ;;
        "error")
            echo -e "${RED}[${timestamp}] ‚ùå ${message}${NC}"
            ;;
        "working")
            echo -e "${CYAN}[${timestamp}] üîÑ ${message}${NC}"
            ;;
        *)
            echo -e "[${timestamp}] ${message}"
            ;;
    esac
}

# ÂÆûÊó∂ÊòæÁ§∫ÂëΩ‰ª§ËæìÂá∫
show_command_output() {
    local command=$1
    local description=${2:-"ÊâßË°åÂëΩ‰ª§"}

    update_status "working" "${description}: $command"

    if eval "$command" 2>&1 | while IFS= read -r line; do
        echo -e "  ${WHITE}‚îÇ${NC} $line"
    done; then
        update_status "success" "${description}ÂÆåÊàê"
        return 0
    else
        update_status "error" "${description}Â§±Ë¥•"
        return 1
    fi
}

# Â§öÊ≠•È™§‰ªªÂä°ËøõÂ∫¶ÊòæÁ§∫
multi_step_task() {
    local steps=("$@")
    local total=${#steps[@]}
    local current=0

    echo -e "${BOLD}${PURPLE}ÂºÄÂßãÊâßË°åÂ§öÊ≠•È™§‰ªªÂä°...${NC}"
    echo ""

    for step in "${steps[@]}"; do
        ((current++))
        show_progress $current $total "Ê≠•È™§ $current/$total"
        update_status "working" "$step"

        # Ê®°Êãü‰ªªÂä°ÊâßË°åÊó∂Èó¥
        sleep 1

        update_status "success" "$step ÂÆåÊàê"
        echo ""
    done

    echo -e "${GREEN}${BOLD}ÊâÄÊúâÊ≠•È™§ÂÆåÊàê!${NC}"
}

# È™åËØÅÂüüÂêçÊ†ºÂºè
validate_domain() {
    local domain="$1"
    # Ê£ÄÊü•ÊòØÂê¶‰∏∫Á©∫
    if [[ -z "$domain" ]]; then
        return 1
    fi
    # Ê£ÄÊü•ÂüüÂêçÊ†ºÂºèÔºàÂÖÅËÆ∏Â≠óÊØç„ÄÅÊï∞Â≠ó„ÄÅÁÇπ„ÄÅËøûÂ≠óÁ¨¶Ôºâ
    if [[ ! "$domain" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
        return 1
    fi
    # Ê£ÄÊü•ÈïøÂ∫¶
    if [[ ${#domain} -gt 253 ]]; then
        return 1
    fi
    return 0
}

# È™åËØÅÂåÖÂêçÊ†ºÂºè
validate_package_name() {
    local pkg_name="$1"
    # Ê£ÄÊü•ÊòØÂê¶‰∏∫Á©∫
    if [[ -z "$pkg_name" ]]; then
        return 1
    fi
    # Ê£ÄÊü•ÂåÖÂêçÊ†ºÂºèÔºàÂÖÅËÆ∏Â≠óÊØç„ÄÅÊï∞Â≠ó„ÄÅÁÇπ„ÄÅËøûÂ≠óÁ¨¶„ÄÅ‰∏ãÂàíÁ∫ø„ÄÅÂä†Âè∑Ôºâ
    if [[ ! "$pkg_name" =~ ^[a-zA-Z0-9][a-zA-Z0-9\.\-_+]*$ ]]; then
        return 1
    fi
    # Ê£ÄÊü•ÈïøÂ∫¶
    if [[ ${#pkg_name} -gt 255 ]]; then
        return 1
    fi
    return 0
}

# È™åËØÅÊñá‰ª∂Ë∑ØÂæÑÂÆâÂÖ®ÊÄß
validate_file_path() {
    local path="$1"
    # Ê£ÄÊü•ÊòØÂê¶‰∏∫Á©∫
    if [[ -z "$path" ]]; then
        return 1
    fi
    # Á¶ÅÊ≠¢Ë∑ØÂæÑÈÅçÂéÜ
    if [[ "$path" == *".."* ]]; then
        return 1
    fi
    # Ê£ÄÊü•Ë∑ØÂæÑÈïøÂ∫¶
    if [[ ${#path} -gt 4096 ]]; then
        return 1
    fi
    # ÂøÖÈ°ªÊòØÁªùÂØπË∑ØÂæÑÊàñÁõ∏ÂØπË∑ØÂæÑ
    if [[ ! "$path" =~ ^(/|\./) ]]; then
        # Â¶ÇÊûú‰∏çÊòØ‰ª• / Êàñ ./ ÂºÄÂ§¥ÔºåÊ∑ªÂä† ./
        path="./$path"
    fi
    return 0
}

# Ê£ÄÊµãUTF-8ÊîØÊåÅ
detect_utf8_support() {
    if [[ "${LC_ALL:-${LANG:-}}" =~ [Uu][Tt][Ff]-?8 ]] && [[ -t 1 ]]; then
        echo "true"
    else
        echo "false"
    fi
}

# Ëé∑ÂèñÊåáÈíàÁ¨¶Âè∑
get_pointer_symbol() {
    if [[ "$(detect_utf8_support)" == "true" ]]; then
        echo "‚ñ∂"
    else
        echo ">"
    fi
}

# Ê∏≤ÊüìÂçï‰∏™ÈÄâÈ°π
render_option() {
    local index=$1
    local text=$2
    local is_selected=$3
    local max_width=${4:-60}

    local pointer=$(get_pointer_symbol)
    local padding="  "

    if [[ $is_selected -eq 1 ]]; then
        # È´ò‰∫ÆÂΩìÂâçÈÄâÊã©È°π
        printf "${padding}${GREEN}${BOLD}%s %s${NC}\n" "$pointer" "$text"
    else
        # ÊôÆÈÄöÈÄâÈ°π
        printf "${padding}  %s\n" "$text"
    fi
}

# Ê∏ÖÂ±èÂπ∂ÁßªÂä®ÂÖâÊ†áÂà∞È°∂ÈÉ®
clear_screen() {
    if [[ "$IN_ALTERNATE_SCREEN" == "true" ]]; then
        # Âú®Â§áÁî®Â±èÁºì‰∏≠ÔºåÁõ¥Êé•Ê∏ÖÂ±è
        printf '\e[2J\e[H'
    else
        # ÊôÆÈÄöÊ®°ÂºèÔºåÊ∏ÖÂ±è
        clear
    fi
}

# Ê∏≤ÊüìÊ†áÈ¢ò
render_title() {
    local title="$1"
    local system_info="$2"

    echo -e "${CYAN}${BOLD}$title${NC}"
    if [[ -n "$system_info" ]]; then
        echo -e "${YELLOW}$system_info${NC}"
    fi
    echo ""
}

# Ê∏≤ÊüìÈÄâÈ°πÂàóË°®
render_options() {
    local current_index=$1
    shift
    local options=("$@")

    for i in "${!options[@]}"; do
        local is_selected=0
        if [[ $i -eq $current_index ]]; then
            is_selected=1
        fi
        render_option "$i" "${options[$i]}" "$is_selected"
    done
}

# Ê∏≤ÊüìÂ∫ïÈÉ®ÊèêÁ§∫
render_help() {
    local help_text="${1:-‰ΩøÁî® ‚Üë/‚Üì Êàñ j/k ÈÄâÊã©ÔºåÂõûËΩ¶Á°ÆËÆ§ÔºåEsc Êàñ q ÈÄÄÂá∫}"
    echo ""
    echo -e "${YELLOW}$help_text${NC}"
}

# Codex CLI È£éÊ†ºÈÄâÊã©Âô®
# ÂèÇÊï∞: Ê†áÈ¢ò [Á≥ªÁªü‰ø°ÊÅØ] [ÂàùÂßãÁ¥¢Âºï] [ÈÄâÈ°π...]
codex_selector() {
    local title="$1"
    local system_info="$2"
    local initial_index="${3:-0}"
    shift 3
    local options=("$@")

    # È™åËØÅÂèÇÊï∞
    if [[ ${#options[@]} -eq 0 ]]; then
        echo "SELECTOR_ERROR"
        return 1
    fi

    # È™åËØÅÂàùÂßãÁ¥¢ÂºïÊòØÂê¶‰∏∫Êï∞Â≠ó
    if ! [[ "$initial_index" =~ ^[0-9]+$ ]]; then
        debug_log "codex_selector: initial_index ‰∏çÊòØÊï∞Â≠óÔºåÈáçÁΩÆ‰∏∫ 0"
        initial_index=0
    fi

    # È™åËØÅÂàùÂßãÁ¥¢ÂºïËåÉÂõ¥
    if [[ $initial_index -lt 0 || $initial_index -ge ${#options[@]} ]]; then
        debug_log "codex_selector: initial_index Ë∂ÖÂá∫ËåÉÂõ¥ÔºåÈáçÁΩÆ‰∏∫ 0"
        initial_index=0
    fi

    local current_index=$initial_index
    local in_selector_mode=true

    # Ê£ÄÊü•ÊòØÂê¶ÊòØTTY
    if [[ ! -t 0 || ! -t 1 ]]; then
        debug_log "Èùû‰∫§‰∫íÂºèÁªàÁ´ØÔºåÂàáÊç¢Âà∞ÊñáÊú¨ËèúÂçïÊ®°Âºè"
        echo "SELECTOR_ERROR"
        return 1
    fi

    # ‰øùÂ≠òÁªàÁ´ØÁä∂ÊÄÅÂπ∂ËÆæÁΩÆÂéüÂßãÊ®°Âºè
    save_terminal_state
    if ! set_raw_terminal; then
        debug_log "ËÆæÁΩÆÂéüÂßãÁªàÁ´ØÊ®°ÂºèÂ§±Ë¥•"
        echo "SELECTOR_ERROR"
        return 1
    fi

    # ËøõÂÖ•Â§áÁî®Â±èÁºì
    enter_alternate_screen

    # ËÆæÁΩÆ‰ø°Âè∑Â§ÑÁêÜ
    trap 'restore_terminal_state; exit 130' INT TERM

    debug_log "codex_selector: ÂºÄÂßãÈÄâÊã©Âô®ÔºåÈÄâÈ°πÊï∞=${#options[@]}, ÂàùÂßãÁ¥¢Âºï=$initial_index"

    # ÂÖ≥Èó≠errexitÔºåÈÅøÂÖçUIÊÑèÂ§ñÈÄÄÂá∫Ôºå‰ΩÜ‰øùÂ≠òÂéüÂßãÁä∂ÊÄÅ
    local errexit_was_set=false
    if [[ $- =~ e ]]; then
        errexit_was_set=true
    fi
    set +e

    # ‰∏ªÂæ™ÁéØ
    while [[ "$in_selector_mode" == "true" ]]; do
        # Ê∏≤ÊüìÁïåÈù¢
        clear_screen
        render_title "$title" "$system_info"
        render_options "$current_index" "${options[@]}"
        render_help

        # ËØªÂèñÊåâÈîÆ
        local key
        key=$(read_key)
        debug_log "codex_selector: Êé•Êî∂Âà∞ÊåâÈîÆ: $key"

        case "$key" in
            "UP")
                if [[ $current_index -gt 0 ]]; then
                    ((current_index--))
                else
                    # ÁéØÁªïÂà∞ÊúÄÂêé‰∏Ä‰∏™ÈÄâÈ°π
                    current_index=$((${#options[@]} - 1))
                fi
                debug_log "codex_selector: Âêë‰∏äÁßªÂä®Âà∞Á¥¢Âºï $current_index"
                ;;
            "DOWN")
                if [[ $current_index -lt $((${#options[@]} - 1)) ]]; then
                    ((current_index++))
                else
                    # ÁéØÁªïÂà∞Á¨¨‰∏Ä‰∏™ÈÄâÈ°π
                    current_index=0
                fi
                debug_log "codex_selector: Âêë‰∏ãÁßªÂä®Âà∞Á¥¢Âºï $current_index"
                ;;
            "ENTER")
                debug_log "codex_selector: Á°ÆËÆ§ÈÄâÊã©Á¥¢Âºï $current_index"
                in_selector_mode=false
                ;;
            "ESCAPE"|"QUIT")
                debug_log "codex_selector: Áî®Êà∑ÂèñÊ∂àÈÄâÊã©"
                current_index="CANCELLED"
                in_selector_mode=false
                ;;
            "TIMEOUT")
                # Ë∂ÖÊó∂ÁªßÁª≠Âæ™ÁéØ
                debug_log "codex_selector: ËØªÂèñË∂ÖÊó∂ÔºåÁªßÁª≠Á≠âÂæÖ"
                ;;
            "OTHER")
                # ÂøΩÁï•ÂÖ∂‰ªñÊåâÈîÆ
                debug_log "codex_selector: ÂøΩÁï•Êú™Áü•ÊåâÈîÆ"
                ;;
            *)
                debug_log "codex_selector: Êú™Â§ÑÁêÜÁöÑÊåâÈîÆ: $key"
                ;;
        esac
    done

    # ÊÅ¢Â§çerrexitÔºàÂ¶ÇÊûú‰πãÂâçÊòØÂºÄÂêØÁöÑÔºâ
    if [[ "$errexit_was_set" == "true" ]]; then
        set -e
    fi

    # ÊÅ¢Â§çÁªàÁ´ØÁä∂ÊÄÅ
    restore_terminal_state

    # ËøîÂõûÁªìÊûú
    echo "$current_index"
    return 0
}

# ÁÆÄÂåñÁöÑÈÄâÊã©Âô®Êé•Âè£Ôºà‰ªÖÊ†áÈ¢òÂíåÈÄâÈ°πÔºâ
simple_selector() {
    local title="$1"
    shift
    local options=("$@")

    codex_selector "$title" "" 0 "${options[@]}"
}

# ==================== Ê®°ÂùóÂåñÁ≥ªÁªü ====================

# ÂàùÂßãÂåñÊ®°ÂùóÁ≥ªÁªü
init_module_system() {
    local script_dir=$(dirname "$(readlink -f "$0")")

    # Â∞ùËØïÂ§ö‰∏™ÂèØËÉΩÁöÑÊ®°ÂùóÁõÆÂΩï‰ΩçÁΩÆ
    local possible_dirs=(
        "$script_dir/modules"
        "$HOME/.local/lib/warpkit/modules"
        "/usr/local/lib/warpkit/modules"
        "/opt/warpkit/modules"
    )

    for dir in "${possible_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            WARPKIT_MODULES_DIR="$dir"
            debug_log "ÊâæÂà∞Ê®°ÂùóÁõÆÂΩï: $dir"
            break
        fi
    done

    if [[ -z "$WARPKIT_MODULES_DIR" ]]; then
        debug_log "Êú™ÊâæÂà∞Ê®°ÂùóÁõÆÂΩïÔºå‰ΩøÁî®ÂÜÖÁΩÆÂäüËÉΩ"
        return 1
    fi

    # Êâ´ÊèèÂèØÁî®Ê®°Âùó
    scan_available_modules
    return 0
}

# Êâ´ÊèèÂèØÁî®Ê®°Âùó
scan_available_modules() {
    AVAILABLE_MODULES=()

    if [[ ! -d "$WARPKIT_MODULES_DIR" ]]; then
        return 1
    fi

    for module_file in "$WARPKIT_MODULES_DIR"/*.sh; do
        if [[ -f "$module_file" ]]; then
            local module_name=$(basename "$module_file" .sh)
            AVAILABLE_MODULES+=("$module_name")
            debug_log "ÂèëÁé∞Ê®°Âùó: $module_name"
        fi
    done
}

# Âä†ËΩΩÊ®°Âùó
load_module() {
    local module_name="$1"
    local module_file="$WARPKIT_MODULES_DIR/${module_name}.sh"

    # Ê£ÄÊü•Ê®°ÂùóÊòØÂê¶Â∑≤Âä†ËΩΩ
    for loaded in "${LOADED_MODULES[@]}"; do
        if [[ "$loaded" == "$module_name" ]]; then
            debug_log "Ê®°Âùó $module_name Â∑≤Âä†ËΩΩ"
            return 0
        fi
    done

    # Ê£ÄÊü•Ê®°ÂùóÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    if [[ ! -f "$module_file" ]]; then
        debug_log "Ê®°ÂùóÊñá‰ª∂‰∏çÂ≠òÂú®: $module_file"
        return 1
    fi

    # Âä†ËΩΩÊ®°Âùó
    debug_log "Âä†ËΩΩÊ®°Âùó: $module_name"
    if source "$module_file" 2>/dev/null; then
        LOADED_MODULES+=("$module_name")
        debug_log "Ê®°Âùó $module_name Âä†ËΩΩÊàêÂäü"
        return 0
    else
        debug_log "Ê®°Âùó $module_name Âä†ËΩΩÂ§±Ë¥•"
        return 1
    fi
}

# Ê£ÄÊü•Ê®°ÂùóÊòØÂê¶ÂèØÁî®
is_module_available() {
    local module_name="$1"

    for available in "${AVAILABLE_MODULES[@]}"; do
        if [[ "$available" == "$module_name" ]]; then
            return 0
        fi
    done
    return 1
}

# Ê£ÄÊü•Ê®°ÂùóÊòØÂê¶Â∑≤Âä†ËΩΩ
is_module_loaded() {
    local module_name="$1"

    for loaded in "${LOADED_MODULES[@]}"; do
        if [[ "$loaded" == "$module_name" ]]; then
            return 0
        fi
    done
    return 1
}

# Ë∞ÉÁî®Ê®°ÂùóÂáΩÊï∞ÔºàÂÆâÂÖ®Ë∞ÉÁî®Ôºâ
call_module_function() {
    local module_name="$1"
    local function_name="$2"
    shift 2

    # Â∞ùËØïÂä†ËΩΩÊ®°Âùó
    if ! is_module_loaded "$module_name"; then
        if ! load_module "$module_name"; then
            debug_log "Êó†Ê≥ïÂä†ËΩΩÊ®°Âùó $module_name"
            return 1
        fi
    fi

    # Ê£ÄÊü•ÂáΩÊï∞ÊòØÂê¶Â≠òÂú®
    if declare -F "$function_name" >/dev/null; then
        debug_log "Ë∞ÉÁî®Ê®°ÂùóÂáΩÊï∞: $module_name::$function_name"
        "$function_name" "$@"
        return $?
    else
        debug_log "ÂáΩÊï∞‰∏çÂ≠òÂú®: $function_name"
        return 1
    fi
}

# Ê®°ÂùóÂåñÁöÑËèúÂçïÈ°πÂ§ÑÁêÜ
handle_modular_menu_item() {
    local item="$1"

    case "$item" in
        "Á≥ªÁªüÂ∑•ÂÖ∑")
            if call_module_function "system" "show_system_monitor"; then
                return 0
            else
                show_system_monitor_builtin
            fi
            ;;
        "ÂåÖÁÆ°ÁêÜ")
            if call_module_function "packages" "show_package_management"; then
                return 0
            else
                show_package_management_builtin
            fi
            ;;
        "ÁΩëÁªúÂ∑•ÂÖ∑")
            if call_module_function "network" "show_network_tools"; then
                return 0
            else
                show_network_tools_builtin
            fi
            ;;
        "Êó•ÂøóÊü•Áúã")
            if call_module_function "logs" "show_log_viewer"; then
                return 0
            else
                show_log_viewer_builtin
            fi
            ;;
        *)
            return 1
            ;;
    esac
}

# ÊòæÁ§∫‰∏ªËèúÂçï (Êñ∞ÈÄâÊã©Âô®ÁâàÊú¨)
show_main_menu() {
    local main_options=(
        "Á≥ªÁªüÂ∑•ÂÖ∑"
        "ÂåÖÁÆ°ÁêÜ"
        "ÁΩëÁªúÂ∑•ÂÖ∑"
        "Êó•ÂøóÊü•Áúã"
        "ËÑöÊú¨ÁÆ°ÁêÜ"
        "ÈÄÄÂá∫"
    )

    # ÊûÑÂª∫Á≥ªÁªü‰ø°ÊÅØÂ≠óÁ¨¶‰∏≤
    local system_info_line="$DISTRO $VERSION | $KERNEL | $ARCH"

    # ‰ΩøÁî®Êñ∞ÁöÑÈÄâÊã©Âô®
    local result
    result=$(codex_selector "WarpKit $(get_current_version) - LinuxÊúçÂä°ËøêÁª¥Â∑•ÂÖ∑" "$system_info_line" "$CURRENT_SELECTION" "${main_options[@]}")

    debug_log "show_main_menu: ÈÄâÊã©Âô®ËøîÂõûÁªìÊûú: $result"

    # Â§ÑÁêÜÈÄâÊã©ÁªìÊûú
    case "$result" in
        "CANCELLED")
            debug_log "show_main_menu: Áî®Êà∑ÂèñÊ∂à"
            return 1
            ;;
        "SELECTOR_ERROR")
            debug_log "show_main_menu: ÈÄâÊã©Âô®ÈîôËØØÔºåÂàáÊç¢Âà∞ÊñáÊú¨ËèúÂçï"
            show_text_menu
            return 0
            ;;
        [0-9]*)
            # Êõ¥Êñ∞ÂΩìÂâçÈÄâÊã©
            CURRENT_SELECTION=$result
            # Â§ÑÁêÜÈÄâÊã©ÁöÑËèúÂçïÈ°π
            handle_menu_selection
            return 0
            ;;
        *)
            debug_log "show_main_menu: Êú™Áü•ÈÄâÊã©Âô®ÁªìÊûú: $result"
            return 1
            ;;
    esac
}

# ÊñáÊú¨ËèúÂçïÊ®°ÂºèÔºàÂΩì‰∫§‰∫íÂºèÈÄâÊã©Âô®‰∏çÂèØÁî®Êó∂Ôºâ
show_text_menu() {
    while true; do
        clear
        print_logo
        show_system_info

        echo -e "${CYAN}${BOLD}‰∏ªËèúÂçï${NC}"
        echo ""
        echo "1. Á≥ªÁªüÂ∑•ÂÖ∑"
        echo "2. ÂåÖÁÆ°ÁêÜ"
        echo "3. ÁΩëÁªúÂ∑•ÂÖ∑"
        echo "4. Êó•ÂøóÊü•Áúã"
        echo "5. ËÑöÊú¨ÁÆ°ÁêÜ"
        echo "6. ÈÄÄÂá∫"
        echo ""
        echo -n "ËØ∑ÈÄâÊã©ÂäüËÉΩ (1-6): "

        read -r choice
        echo ""

        case "$choice" in
            1)
                CURRENT_SELECTION=0
                handle_menu_selection
                ;;
            2)
                CURRENT_SELECTION=1
                handle_menu_selection
                ;;
            3)
                CURRENT_SELECTION=2
                handle_menu_selection
                ;;
            4)
                CURRENT_SELECTION=3
                handle_menu_selection
                ;;
            5)
                CURRENT_SELECTION=4
                handle_menu_selection
                ;;
            6)
                echo -e "${YELLOW}ÂÜçËßÅÔºÅ${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Êó†ÊïàÈÄâÊã©ÔºåËØ∑ËæìÂÖ• 1-6${NC}"
                sleep 2
                ;;
        esac
    done
}

# ÂÖ®Â±ÄÁªàÁ´ØÁä∂ÊÄÅÂèòÈáè
declare -g TERMINAL_STATE_SAVED=false
# ‰ΩøÁî®Êõ¥ÂÆâÂÖ®ÁöÑ‰∏¥Êó∂Êñá‰ª∂ÂëΩÂêçÔºàÂåÖÂê´ÈöèÊú∫Êï∞ÂíåÊó∂Èó¥Êà≥Ôºâ
declare -g TERMINAL_STATE_FILE="/tmp/warpkit_terminal_state.$$.$(date +%s).${RANDOM}"
declare -g IN_ALTERNATE_SCREEN=false

# ‰øùÂ≠òÁªàÁ´ØÁä∂ÊÄÅ
save_terminal_state() {
    if [[ "$TERMINAL_STATE_SAVED" == "false" ]]; then
        if stty -g > "$TERMINAL_STATE_FILE" 2>/dev/null; then
            TERMINAL_STATE_SAVED=true
            debug_log "ÁªàÁ´ØÁä∂ÊÄÅÂ∑≤‰øùÂ≠òÂà∞ $TERMINAL_STATE_FILE"
        else
            debug_log "‰øùÂ≠òÁªàÁ´ØÁä∂ÊÄÅÂ§±Ë¥•"
        fi
    fi
}

# ÊÅ¢Â§çÁªàÁ´ØÁä∂ÊÄÅ
restore_terminal_state() {
    # ÈÄÄÂá∫Â§áÁî®Â±èÁºì
    if [[ "$IN_ALTERNATE_SCREEN" == "true" ]]; then
        printf '\e[?1049l' 2>/dev/null
        IN_ALTERNATE_SCREEN=false
        debug_log "Â∑≤ÈÄÄÂá∫Â§áÁî®Â±èÁºì"
    fi

    # ÊòæÁ§∫ÂÖâÊ†á
    printf '\e[?25h' 2>/dev/null

    # ÊÅ¢Â§çÁªàÁ´ØËÆæÁΩÆ
    if [[ "$TERMINAL_STATE_SAVED" == "true" && -f "$TERMINAL_STATE_FILE" ]]; then
        if stty "$(cat "$TERMINAL_STATE_FILE")" 2>/dev/null; then
            debug_log "ÁªàÁ´ØÁä∂ÊÄÅÂ∑≤ÊÅ¢Â§ç"
        else
            stty sane 2>/dev/null
            debug_log "‰ΩøÁî®saneÊ®°ÂºèÊÅ¢Â§çÁªàÁ´Ø"
        fi
        rm -f "$TERMINAL_STATE_FILE" 2>/dev/null
        TERMINAL_STATE_SAVED=false
    else
        stty sane 2>/dev/null
        debug_log "‰ΩøÁî®saneÊ®°ÂºèÊÅ¢Â§çÁªàÁ´Ø"
    fi
}

# ËÆæÁΩÆÂéüÂßãÁªàÁ´ØÊ®°Âºè
set_raw_terminal() {
    # ÂÖ≥Èó≠ÂõûÊòæ„ÄÅËßÑËåÉÊ®°Âºè„ÄÅ‰ø°Âè∑Â§ÑÁêÜÂíåXON/XOFF
    # min 1: Ëá≥Â∞ëËØªÂèñ‰∏Ä‰∏™Â≠óËäÇ
    # time 0: Êó†Ë∂ÖÊó∂
    if stty -echo -icanon -isig -ixon min 1 time 0 2>/dev/null; then
        debug_log "ÂéüÂßãÁªàÁ´ØÊ®°ÂºèËÆæÁΩÆÊàêÂäü"
    else
        debug_log "ÂéüÂßãÁªàÁ´ØÊ®°ÂºèËÆæÁΩÆÂ§±Ë¥•"
        return 1
    fi
}

# ËøõÂÖ•Â§áÁî®Â±èÁºìÂπ∂ÈöêËóèÂÖâÊ†á
enter_alternate_screen() {
    if [[ -t 0 && -t 1 ]]; then
        # Ê£ÄÊü•ÁªàÁ´ØÊòØÂê¶ÊîØÊåÅÂ§áÁî®Â±èÁºì
        if [[ -n "${TERM:-}" ]] && [[ "$TERM" != "dumb" ]]; then
            printf '\e[?1049h' 2>/dev/null && {
                IN_ALTERNATE_SCREEN=true
                debug_log "Â∑≤ËøõÂÖ•Â§áÁî®Â±èÁºì"
            } || {
                debug_log "Â§áÁî®Â±èÁºì‰∏çÊîØÊåÅÔºå‰ΩøÁî®ÊôÆÈÄöÊ∏ÖÂ±è"
                clear
            }
        else
            clear
        fi
        # ÈöêËóèÂÖâÊ†á
        printf '\e[?25l' 2>/dev/null
    fi
}

# Ë∞ÉËØïËæìÂá∫
debug_log() {
    if [[ "$DEBUG_MODE" == "true" ]]; then
        echo "[DEBUG] $*" >&2
    fi
}

# Ê∏ÖÁ©∫ËæìÂÖ•ÁºìÂÜ≤Âå∫
flush_input() {
    local dummy
    while IFS= read -r -n1 -t 0.001 dummy 2>/dev/null; do
        debug_log "flush_input: Ê∏ÖÈô§ÊÆãÁïôÂ≠óËäÇ: $(printf '%q' "$dummy")"
    done
    true
}

# ËØªÂèñÂçï‰∏™Â≠óÁ¨¶ÔºàÂéüÂßãÂ≠óËäÇÔºâ
read_raw_char() {
    local char=""
    if IFS= read -r -n1 -t 10 char 2>/dev/null; then
        printf '%s' "$char"
        return 0
    else
        return 1
    fi
}

# Ëß£ÊûêÊåâÈîÆÂ∫èÂàó
parse_key_sequence() {
    local first_char="$1"
    local timeout=${2:-0.1}

    # Â¶ÇÊûú‰∏çÊòØESCÔºåÁõ¥Êé•ËøîÂõû
    if [[ "$first_char" != $'\e' ]]; then
        echo "$first_char"
        return 0
    fi

    # ESCÂ∫èÂàóÂ§ÑÁêÜ
    local second_char=""
    if IFS= read -r -n1 -t "$timeout" second_char 2>/dev/null; then
        debug_log "parse_key_sequence: ESC + $(printf '%q' "$second_char")"

        case "$second_char" in
            '[')
                # Ê†áÂáÜANSIÂ∫èÂàó ESC[
                local third_char=""
                if IFS= read -r -n1 -t "$timeout" third_char 2>/dev/null; then
                    case "$third_char" in
                        'A') echo "UP"; return 0 ;;
                        'B') echo "DOWN"; return 0 ;;
                        'C') echo "RIGHT"; return 0 ;;
                        'D') echo "LEFT"; return 0 ;;
                        '1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')
                            # Êâ©Â±ïÂ∫èÂàóÔºåÁªßÁª≠ËØªÂèñÁõ¥Âà∞ÊâæÂà∞ÁªìÊùüÂ≠óÁ¨¶
                            local extended_seq="$third_char"
                            local char=""
                            while IFS= read -r -n1 -t 0.05 char 2>/dev/null; do
                                extended_seq+="$char"
                                case "$char" in
                                    'A'|'B'|'C'|'D'|'~'|'H'|'F')
                                        # ÊâæÂà∞ÁªìÊùüÂ≠óÁ¨¶
                                        case "$char" in
                                            'A') echo "UP"; return 0 ;;
                                            'B') echo "DOWN"; return 0 ;;
                                            'C') echo "RIGHT"; return 0 ;;
                                            'D') echo "LEFT"; return 0 ;;
                                            *) echo "ESCAPE"; return 0 ;;
                                        esac
                                        ;;
                                esac
                                # Èò≤Ê≠¢Êó†ÈôêÂæ™ÁéØ
                                if [[ ${#extended_seq} -gt 10 ]]; then
                                    break
                                fi
                            done
                            echo "ESCAPE"
                            return 0
                            ;;
                        *) echo "ESCAPE"; return 0 ;;
                    esac
                else
                    echo "ESCAPE"
                    return 0
                fi
                ;;
            'O')
                # Â∫îÁî®Á®ãÂ∫èÈîÆÊ®°Âºè ESCO
                local third_char=""
                if IFS= read -r -n1 -t "$timeout" third_char 2>/dev/null; then
                    case "$third_char" in
                        'A') echo "UP"; return 0 ;;
                        'B') echo "DOWN"; return 0 ;;
                        'C') echo "RIGHT"; return 0 ;;
                        'D') echo "LEFT"; return 0 ;;
                        *) echo "ESCAPE"; return 0 ;;
                    esac
                else
                    echo "ESCAPE"
                    return 0
                fi
                ;;
            *)
                # ÂÖ∂‰ªñESCÂ∫èÂàóÔºåÂΩìÂÅöESCÂ§ÑÁêÜ
                echo "ESCAPE"
                return 0
                ;;
        esac
    else
        # ÂçïÁã¨ÁöÑESC
        echo "ESCAPE"
        return 0
    fi
}

# ËØªÂèñÊåâÈîÆÂπ∂Ëß£Êûê
read_key() {
    # Ê∏ÖÈô§ËæìÂÖ•ÁºìÂÜ≤
    flush_input

    # ËØªÂèñÁ¨¨‰∏Ä‰∏™Â≠óÁ¨¶
    local first_char=""
    if ! first_char=$(read_raw_char); then
        debug_log "read_key: ËØªÂèñË∂ÖÊó∂ÊàñÂ§±Ë¥•"
        echo "TIMEOUT"
        return 0
    fi

    debug_log "read_key: Á¨¨‰∏ÄÂ≠óÁ¨¶: $(printf '%q' "$first_char")"

    # Â§ÑÁêÜÁâπÊÆäÂ≠óÁ¨¶
    case "$first_char" in
        '')
            debug_log "read_key: Á©∫Â≠óÁ¨¶ÔºåÂøΩÁï•"
            echo "OTHER"
            return 0
            ;;
        $'\n'|$'\r')
            debug_log "read_key: ÂõûËΩ¶/Êç¢Ë°å"
            echo "ENTER"
            return 0
            ;;
        $'\e')
            # ESCÂ∫èÂàóÂ§ÑÁêÜ
            local parsed_key
            parsed_key=$(parse_key_sequence "$first_char")
            debug_log "read_key: ESCÂ∫èÂàóËß£ÊûêÁªìÊûú: $parsed_key"
            echo "$parsed_key"
            return 0
            ;;
        'q'|'Q')
            debug_log "read_key: ÈÄÄÂá∫ÈîÆ"
            echo "QUIT"
            return 0
            ;;
        'j')
            debug_log "read_key: vimÈ£éÊ†º‰∏ãÁßª"
            echo "DOWN"
            return 0
            ;;
        'k')
            debug_log "read_key: vimÈ£éÊ†º‰∏äÁßª"
            echo "UP"
            return 0
            ;;
        ' ')
            debug_log "read_key: Á©∫Ê†ºÈîÆ"
            echo "ENTER"
            return 0
            ;;
        $'\x03')
            debug_log "read_key: Ctrl+C"
            echo "QUIT"
            return 0
            ;;
        *)
            debug_log "read_key: ÂÖ∂‰ªñÂ≠óÁ¨¶: $(printf '%q' "$first_char")"
            echo "OTHER"
            return 0
            ;;
    esac
}

# Â§ÑÁêÜËèúÂçïÂØºËà™ (Êñ∞ÈÄâÊã©Âô®ÁâàÊú¨)
handle_navigation() {
    # ‰∏ªËèúÂçïÂæ™ÁéØ
    while true; do
        if ! show_main_menu; then
            # Áî®Êà∑ÂèñÊ∂àÊàñÂá∫ÈîôÔºåÈÄÄÂá∫
            echo -e "\n${YELLOW}ÂÜçËßÅÔºÅ${NC}"
            exit 0
        fi

        # show_main_menu Â∑≤ÁªèÂ§ÑÁêÜ‰∫ÜÈÄâÊã©ÂíåËèúÂçïÂàáÊç¢
        # Â¶ÇÊûúÂà∞ËøôÈáåÔºåËØ¥Êòé‰ªéÂ≠êËèúÂçïËøîÂõû‰∫ÜÔºåÁªßÁª≠ÊòæÁ§∫‰∏ªËèúÂçï
    done
}

# Â§ÑÁêÜËèúÂçïÈÄâÊã©
handle_menu_selection() {
    local main_options=(
        "Á≥ªÁªüÂ∑•ÂÖ∑"
        "ÂåÖÁÆ°ÁêÜ"
        "ÁΩëÁªúÂ∑•ÂÖ∑"
        "Êó•ÂøóÊü•Áúã"
        "ËÑöÊú¨ÁÆ°ÁêÜ"
        "ÈÄÄÂá∫"
    )

    local selected_option="${main_options[$CURRENT_SELECTION]}"

    case "$selected_option" in
        "ËÑöÊú¨ÁÆ°ÁêÜ")
            # ËÑöÊú¨ÁÆ°ÁêÜÂßãÁªà‰ΩøÁî®ÂÜÖÁΩÆÂäüËÉΩ
            show_script_management
            ;;
        "ÈÄÄÂá∫")
            echo -e "\n${YELLOW}ÂÜçËßÅÔºÅ${NC}"
            exit 0
            ;;
        *)
            # Â∞ùËØï‰ΩøÁî®Ê®°ÂùóÂåñÂ§ÑÁêÜÔºåÂ§±Ë¥•Âàô‰ΩøÁî®ÂÜÖÁΩÆÂäüËÉΩ
            if ! handle_modular_menu_item "$selected_option"; then
                case "$selected_option" in
                    "Á≥ªÁªüÂ∑•ÂÖ∑")
                        show_system_monitor_builtin
                        ;;
                    "ÂåÖÁÆ°ÁêÜ")
                        show_package_management_builtin
                        ;;
                    "ÁΩëÁªúÂ∑•ÂÖ∑")
                        show_network_tools_builtin
                        ;;
                    "Êó•ÂøóÊü•Áúã")
                        show_log_viewer_builtin
                        ;;
                esac
            fi
            ;;
    esac
}

# Á≥ªÁªüÂ∑•ÂÖ∑ÊºîÁ§∫ÔºàÂÜÖÁΩÆÁâàÊú¨Ôºâ
show_system_monitor_builtin() {
    clear
    echo -e "${BLUE}${BOLD}Á≥ªÁªüÂ∑•ÂÖ∑${NC}"
    echo ""
    echo -e "${CYAN}Á≥ªÁªü‰ø°ÊÅØ:${NC}"
    uptime 2>/dev/null || echo "Á≥ªÁªüËøêË°åÊó∂Èó¥: ‰∏çÂèØÁî®"
    free -h 2>/dev/null || echo "ÂÜÖÂ≠ò‰ø°ÊÅØ: ‰∏çÂèØÁî®"
    df -h 2>/dev/null | head -5 || echo "Á£ÅÁõò‰ø°ÊÅØ: ‰∏çÂèØÁî®"
    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõû‰∏ªËèúÂçï"
    read -n1
}

# Ê£ÄÊµãÂåÖÁÆ°ÁêÜÂô®
detect_package_manager() {
    local pkg_manager=""

    # Êåâ‰ºòÂÖàÁ∫ßÊ£ÄÊµãÂåÖÁÆ°ÁêÜÂô®
    if command -v apt >/dev/null 2>&1; then
        pkg_manager="apt"
    elif command -v yum >/dev/null 2>&1; then
        pkg_manager="yum"
    elif command -v dnf >/dev/null 2>&1; then
        pkg_manager="dnf"
    elif command -v pacman >/dev/null 2>&1; then
        pkg_manager="pacman"
    elif command -v zypper >/dev/null 2>&1; then
        pkg_manager="zypper"
    elif command -v apk >/dev/null 2>&1; then
        pkg_manager="apk"
    elif command -v emerge >/dev/null 2>&1; then
        pkg_manager="portage"
    else
        pkg_manager="unknown"
    fi

    echo "$pkg_manager"
}

# ÂåÖÁÆ°ÁêÜËèúÂçïÔºàÂÜÖÁΩÆÁâàÊú¨Ôºâ
show_package_management_builtin() {
    clear
    echo -e "${BLUE}${BOLD}ÂåÖÁÆ°ÁêÜ${NC}"
    echo ""
    local pkg_manager=$(detect_package_manager)
    echo -e "${CYAN}ÂåÖÁÆ°ÁêÜÂô®: ${GREEN}$pkg_manager${NC}"
    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõû‰∏ªËèúÂçï"
    read -n1
}



# ÁΩëÁªúÂ∑•ÂÖ∑ËèúÂçïÔºàÂÜÖÁΩÆÁâàÊú¨Ôºâ
show_network_tools_builtin() {
    clear
    echo -e "${BLUE}${BOLD}ÁΩëÁªúÂ∑•ÂÖ∑${NC}"
    echo ""
    echo -e "${CYAN}ÁΩëÁªúÁä∂ÊÄÅ:${NC}"
    ping -c 1 8.8.8.8 >/dev/null 2>&1 && echo "‚úì ÁΩëÁªúËøûÊé•Ê≠£Â∏∏" || echo "‚úó ÁΩëÁªúËøûÊé•ÂºÇÂ∏∏"
    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõû‰∏ªËèúÂçï"
    read -n1
}

# Êó•ÂøóÊü•ÁúãÊºîÁ§∫ÔºàÂÜÖÁΩÆÁâàÊú¨Ôºâ
show_log_viewer_builtin() {
    clear
    echo -e "${BLUE}${BOLD}Êó•ÂøóÊü•Áúã${NC}"
    echo ""
    echo -e "${CYAN}Á≥ªÁªüÊó•Âøó:${NC}"
    if command -v journalctl >/dev/null 2>&1; then
        journalctl -n 10 --no-pager 2>/dev/null | head -5 || echo "Á≥ªÁªüÊó•Âøó: ‰∏çÂèØÁî®"
    elif [[ -f /var/log/messages ]]; then
        tail -5 /var/log/messages 2>/dev/null || echo "Á≥ªÁªüÊó•Âøó: ‰∏çÂèØÁî®"
    else
        echo "Á≥ªÁªüÊó•Âøó: ‰∏çÂèØÁî®"
    fi
    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõû‰∏ªËèúÂçï"
    read -n1
}


# Á≥ªÁªüÊõ¥Êñ∞ÊºîÁ§∫
show_system_update() {
    clear
    echo -e "${BLUE}${BOLD}Á≥ªÁªüÊõ¥Êñ∞${NC}"
    echo ""

    local update_steps=("Ê£ÄÊü•Êõ¥Êñ∞Ê∫ê" "‰∏ãËΩΩÊõ¥Êñ∞ÂàóË°®" "ÂàÜÊûê‰æùËµñÂÖ≥Á≥ª" "ÂáÜÂ§áÊõ¥Êñ∞ÂåÖ" "ÂÆåÊàêÊõ¥Êñ∞Ê£ÄÊü•")

    echo -e "${YELLOW}Ê≥®ÊÑè: ËøôÊòØÊõ¥Êñ∞Ê£ÄÊü•ÊºîÁ§∫Ôºå‰∏ç‰ºöÂÆûÈôÖÊõ¥Êñ∞Á≥ªÁªü${NC}"
    echo ""

    for i in "${!update_steps[@]}"; do
        show_progress $((i+1)) ${#update_steps[@]} "Á≥ªÁªüÊõ¥Êñ∞Ê£ÄÊü•"
        update_status "working" "${update_steps[$i]}"
        sleep 1
        update_status "success" "${update_steps[$i]} ÂÆåÊàê"
    done

    echo ""
    update_status "info" "Á≥ªÁªüÊõ¥Êñ∞Ê£ÄÊü•ÂÆåÊàêÔºåÊ≤°ÊúâÂèëÁé∞ÂèØÁî®Êõ¥Êñ∞"

    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõû‰∏ªËèúÂçï"
    read -n1
}

# ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
show_help() {
    echo -e "${CYAN}${BOLD}WarpKit - LinuxÊúçÂä°ËøêÁª¥Â∑•ÂÖ∑ $(get_current_version)${NC}"
    echo ""
    echo -e "${YELLOW}Áî®Ê≥ï:${NC}"
    echo "  warpkit [ÈÄâÈ°π]"
    echo ""
    echo -e "${YELLOW}ÈÄâÈ°π:${NC}"
    echo "  -h, --help        ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"
    echo "  -v, --version     ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ"
    echo "  -u, --update      Ê£ÄÊü•Âπ∂Êõ¥Êñ∞Âà∞ÊúÄÊñ∞ÁâàÊú¨"
    echo "  --config          ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ"
    echo "  --theme           ËÆæÁΩÆ‰∏ªÈ¢ò (default, dark, light)"
    echo "  --lang            ËÆæÁΩÆËØ≠Ë®Ä (zh_CN, en_US)"
    echo ""
    echo -e "${YELLOW}Á§∫‰æã:${NC}"
    echo "  warpkit           # ÂêØÂä®‰∫§‰∫íÂºèÁïåÈù¢"
    echo "  warpkit --update  # Ê£ÄÊü•Êõ¥Êñ∞"
    echo "  warpkit --version # ÊòæÁ§∫ÁâàÊú¨"
    echo ""
}

# ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ
show_version() {
    echo "WarpKit $(get_current_version)"
}

# Â§ÑÁêÜÂëΩ‰ª§Ë°åÂèÇÊï∞
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -u|--update)
                check_for_updates true
                exit 0
                ;;
            --config)
                CONFIG_FILE="$2"
                shift 2
                ;;
            --theme)
                THEME="$2"
                shift 2
                ;;
            --lang)
                LANGUAGE="$2"
                shift 2
                ;;
            --debug)
                DEBUG_MODE=true
                shift
                ;;
            *)
                echo -e "${RED}Êú™Áü•ÈÄâÈ°π: $1${NC}"
                echo "‰ΩøÁî® --help Êü•ÁúãÂèØÁî®ÈÄâÈ°π"
                exit 1
                ;;
        esac
    done
}

# ËÑöÊú¨ÁÆ°ÁêÜËèúÂçï
show_script_management() {
    while true; do
        clear
        print_logo

        echo -e "${BLUE}${BOLD}ËÑöÊú¨ÁÆ°ÁêÜ${NC}"
        echo ""
        echo -e "${CYAN}ÂΩìÂâçÁâàÊú¨: $(get_current_version)${NC}"
        echo ""

        echo "1. Ê£ÄÊü•Êõ¥Êñ∞"
        echo "2. Âç∏ËΩΩWarpKit"
        echo "3. Êü•ÁúãÁâàÊú¨‰ø°ÊÅØ"
        echo "4. Ê∏ÖÁêÜÁºìÂ≠òÊñá‰ª∂"
        echo "5. ËøîÂõû‰∏ªËèúÂçï"
        echo ""
        echo -n "ËØ∑ÈÄâÊã©ÂäüËÉΩ (1-5): "

        read -r choice
        echo ""

        case "$choice" in
            1)
                manual_check_update
                ;;
            2)
                uninstall_warpkit
                ;;
            3)
                show_version_info
                ;;
            4)
                clean_cache_files
                ;;
            5)
                return
                ;;
            *)
                echo -e "${RED}Êó†ÊïàÈÄâÊã©ÔºåËØ∑ËæìÂÖ• 1-5${NC}"
                sleep 2
                ;;
        esac
    done
}

# ÊâãÂä®Ê£ÄÊü•Êõ¥Êñ∞
manual_check_update() {
    clear
    echo -e "${BLUE}${BOLD}Ê£ÄÊü•Êõ¥Êñ∞${NC}"
    echo ""

    echo -e "${YELLOW}Ê≠£Âú®Ê£ÄÊü•WarpKitÊõ¥Êñ∞...${NC}"
    check_for_updates true

    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõûËÑöÊú¨ÁÆ°ÁêÜËèúÂçï"
    read -n1
}

# Âç∏ËΩΩWarpKit
uninstall_warpkit() {
    clear
    echo -e "${BLUE}${BOLD}Âç∏ËΩΩWarpKit${NC}"
    echo ""

    echo -e "${RED}${BOLD}Ë≠¶Âëä: ËøôÂ∞ÜÂÆåÂÖ®Âç∏ËΩΩWarpKitÂèäÂÖ∂ÊâÄÊúâÁõ∏ÂÖ≥Êñá‰ª∂ÔºÅ${NC}"
    echo ""
    echo -e "${YELLOW}Â∞ÜÂà†Èô§‰ª•‰∏ãÂÜÖÂÆπ:${NC}"
    echo "  ‚Ä¢ WarpKit‰∏ªÁ®ãÂ∫è"
    echo "  ‚Ä¢ ÈÖçÁΩÆÊñá‰ª∂ÁõÆÂΩï: ~/.config/warpkit"
    echo "  ‚Ä¢ ÁºìÂ≠òÊñá‰ª∂ÁõÆÂΩï: ~/.cache/warpkit"
    echo "  ‚Ä¢ DNSÂ§á‰ªΩÊñá‰ª∂"
    echo "  ‚Ä¢ ÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂"
    echo ""

    echo -e "${CYAN}Á°ÆÂÆöË¶ÅÂç∏ËΩΩWarpKitÂêóÔºü [y/N]${NC}"
    # ‰∏¥Êó∂ÊÅ¢Â§çÁªàÁ´ØÊ®°ÂºèËøõË°åËæìÂÖ•
    local old_stty=""
    old_stty=$(stty -g 2>/dev/null)
    stty echo icanon 2>/dev/null || true
    read -r response
    # ÊÅ¢Â§ç‰πãÂâçÁöÑÁªàÁ´ØÁä∂ÊÄÅ
    if [[ -n "$old_stty" ]]; then
        stty "$old_stty" 2>/dev/null || stty -echo -icanon 2>/dev/null || true
    else
        stty -echo -icanon 2>/dev/null || true
    fi

    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo ""
        echo -e "${YELLOW}Ê≠£Âú®Âç∏ËΩΩWarpKit...${NC}"

        # Âà†Èô§‰∏ªÁ®ãÂ∫è
        local script_path="$(readlink -f "$0")"
        local script_dir=$(dirname "$script_path")
        local script_name=$(basename "$script_path")

        echo -e "${BLUE}Âà†Èô§‰∏ªÁ®ãÂ∫è...${NC}"
        if [[ -f "$script_path" ]]; then
            # ÂàõÂª∫‰∏Ä‰∏™‰∏¥Êó∂ËÑöÊú¨Êù•Âà†Èô§Ëá™Â∑±
            local temp_uninstall="/tmp/warpkit_uninstall.sh"
            cat > "$temp_uninstall" << 'EOF'
#!/bin/bash
sleep 1
rm -f "$1" 2>/dev/null || {
    echo "Êó†Ê≥ïÂà†Èô§‰∏ªÁ®ãÂ∫èÊñá‰ª∂ÔºåÂèØËÉΩÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôê"
    echo "ËØ∑ÊâãÂä®Âà†Èô§: $1"
}
rm -f "$0"
EOF
            chmod +x "$temp_uninstall"
        fi

        # Âà†Èô§ÈÖçÁΩÆÊñá‰ª∂
        echo -e "${BLUE}Âà†Èô§ÈÖçÁΩÆÊñá‰ª∂...${NC}"
        if [[ -d "$CONFIG_DIR" ]]; then
            rm -rf "$CONFIG_DIR" && echo -e "${GREEN}‚úÖ ÈÖçÁΩÆÊñá‰ª∂Âà†Èô§ÂÆåÊàê${NC}" || echo -e "${YELLOW}‚ö†Ô∏è ÈÖçÁΩÆÊñá‰ª∂Âà†Èô§Â§±Ë¥•${NC}"
        fi

        # Âà†Èô§ÁºìÂ≠òÊñá‰ª∂
        echo -e "${BLUE}Âà†Èô§ÁºìÂ≠òÊñá‰ª∂...${NC}"
        if [[ -d "$CACHE_DIR" ]]; then
            rm -rf "$CACHE_DIR" && echo -e "${GREEN}‚úÖ ÁºìÂ≠òÊñá‰ª∂Âà†Èô§ÂÆåÊàê${NC}" || echo -e "${YELLOW}‚ö†Ô∏è ÁºìÂ≠òÊñá‰ª∂Âà†Èô§Â§±Ë¥•${NC}"
        fi

        # Âà†Èô§Â§á‰ªΩÊñá‰ª∂
        echo -e "${BLUE}Âà†Èô§Â§á‰ªΩÊñá‰ª∂...${NC}"
        find /etc -name "resolv.conf.backup.*" -type f 2>/dev/null | while read backup_file; do
            rm -f "$backup_file" 2>/dev/null && echo -e "${GREEN}‚úÖ Âà†Èô§Â§á‰ªΩ: $(basename "$backup_file")${NC}"
        done

        find /usr/local/bin -name "warpkit.backup.*" -type f 2>/dev/null | while read backup_file; do
            rm -f "$backup_file" 2>/dev/null && echo -e "${GREEN}‚úÖ Âà†Èô§Â§á‰ªΩ: $(basename "$backup_file")${NC}"
        done

        echo ""
        echo -e "${GREEN}${BOLD}üéâ WarpKitÂç∏ËΩΩÂÆåÊàêÔºÅ${NC}"
        echo -e "${YELLOW}ÊÑüË∞¢ÊÇ®‰ΩøÁî®WarpKitÔºÅ${NC}"
        echo ""

        # ÊâßË°å‰∏¥Êó∂Âç∏ËΩΩËÑöÊú¨Âπ∂ÈÄÄÂá∫
        if [[ -f "$temp_uninstall" ]]; then
            exec "$temp_uninstall" "$script_path"
        else
            exit 0
        fi
    else
        echo -e "${YELLOW}ÂèñÊ∂àÂç∏ËΩΩÊìç‰Ωú${NC}"
        echo ""
        echo "Êåâ‰ªªÊÑèÈîÆËøîÂõûËÑöÊú¨ÁÆ°ÁêÜËèúÂçï"
        read -n1
    fi
}

# ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ
show_version_info() {
    clear
    echo -e "${BLUE}${BOLD}ÁâàÊú¨‰ø°ÊÅØ${NC}"
    echo ""

    echo -e "${CYAN}WarpKit ËØ¶ÁªÜ‰ø°ÊÅØ:${NC}"
    echo ""
    echo -e "${GREEN}ÁâàÊú¨: $(get_current_version)${NC}"
    echo -e "${GREEN}ËÑöÊú¨Ë∑ØÂæÑ: $(readlink -f "$0")${NC}"
    echo -e "${GREEN}ÈÖçÁΩÆÁõÆÂΩï: $CONFIG_DIR${NC}"
    echo -e "${GREEN}ÁºìÂ≠òÁõÆÂΩï: $CACHE_DIR${NC}"

    if [[ -f "$CONFIG_DIR/current_version" ]]; then
        local stored_version=$(cat "$CONFIG_DIR/current_version" 2>/dev/null)
        echo -e "${GREEN}Â≠òÂÇ®ÁâàÊú¨: $stored_version${NC}"
    fi

    echo ""
    echo -e "${CYAN}Á≥ªÁªü‰ø°ÊÅØ:${NC}"
    echo -e "${GREEN}Êìç‰ΩúÁ≥ªÁªü: $DISTRO $VERSION${NC}"
    echo -e "${GREEN}ÂÜÖÊ†∏ÁâàÊú¨: $KERNEL${NC}"
    echo -e "${GREEN}Êû∂ÊûÑ: $ARCH${NC}"

    echo ""
    echo -e "${CYAN}GitHub‰ªìÂ∫ì: ${GREEN}https://github.com/$GITHUB_REPO${NC}"

    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõûËÑöÊú¨ÁÆ°ÁêÜËèúÂçï"
    read -n1
}

# Ê∏ÖÁêÜÁºìÂ≠òÊñá‰ª∂
clean_cache_files() {
    clear
    echo -e "${BLUE}${BOLD}Ê∏ÖÁêÜÁºìÂ≠òÊñá‰ª∂${NC}"
    echo ""

    local cache_size=0
    if [[ -d "$CACHE_DIR" ]]; then
        cache_size=$(du -sh "$CACHE_DIR" 2>/dev/null | cut -f1)
        echo -e "${YELLOW}ÂΩìÂâçÁºìÂ≠òÂ§ßÂ∞è: $cache_size${NC}"
    else
        echo -e "${YELLOW}Êú™ÊâæÂà∞ÁºìÂ≠òÁõÆÂΩï${NC}"
    fi

    echo ""
    echo -e "${CYAN}Á°ÆÂÆöË¶ÅÊ∏ÖÁêÜÊâÄÊúâÁºìÂ≠òÊñá‰ª∂ÂêóÔºü [y/N]${NC}"
    # ‰∏¥Êó∂ÊÅ¢Â§çÁªàÁ´ØÊ®°ÂºèËøõË°åËæìÂÖ•
    local old_stty=""
    old_stty=$(stty -g 2>/dev/null)
    stty echo icanon 2>/dev/null || true
    read -r response
    # ÊÅ¢Â§ç‰πãÂâçÁöÑÁªàÁ´ØÁä∂ÊÄÅ
    if [[ -n "$old_stty" ]]; then
        stty "$old_stty" 2>/dev/null || stty -echo -icanon 2>/dev/null || true
    else
        stty -echo -icanon 2>/dev/null || true
    fi

    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo ""
        echo -e "${YELLOW}Ê≠£Âú®Ê∏ÖÁêÜÁºìÂ≠ò...${NC}"

        if [[ -d "$CACHE_DIR" ]]; then
            rm -rf "$CACHE_DIR"/* 2>/dev/null && {
                echo -e "${GREEN}‚úÖ ÁºìÂ≠òÊñá‰ª∂Ê∏ÖÁêÜÂÆåÊàê${NC}"
            } || {
                echo -e "${YELLOW}‚ö†Ô∏è ÁºìÂ≠òÊñá‰ª∂Ê∏ÖÁêÜÂ§±Ë¥•${NC}"
            }
        fi

        # ÈáçÂª∫ÂøÖË¶ÅÁöÑÁºìÂ≠òÁõÆÂΩï
        mkdir -p "$CACHE_DIR"
        echo -e "${GREEN}‚úÖ ÁºìÂ≠òÁõÆÂΩïÈáçÂª∫ÂÆåÊàê${NC}"
    else
        echo -e "${YELLOW}ÂèñÊ∂àÊ∏ÖÁêÜÊìç‰Ωú${NC}"
    fi

    echo ""
    echo "Êåâ‰ªªÊÑèÈîÆËøîÂõûËÑöÊú¨ÁÆ°ÁêÜËèúÂçï"
    read -n1
}

# ‰∏ªÂáΩÊï∞
main() {
    # Â§ÑÁêÜÂëΩ‰ª§Ë°åÂèÇÊï∞
    parse_arguments "$@"

    # Ê£ÄÊü•ÊòØÂê¶Âú®LinuxÁéØÂ¢É‰∏≠ËøêË°å
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        echo -e "${RED}ÈîôËØØ: Ê≠§Â∑•ÂÖ∑Âè™ËÉΩÂú®LinuxÁ≥ªÁªü‰∏≠ËøêË°å${NC}"
        exit 1
    fi

    # Ê£ÄÊµãÁ≥ªÁªü‰ø°ÊÅØ
    detect_distro

    # ÂàùÂßãÂåñÊ®°ÂùóÁ≥ªÁªü
    init_module_system && debug_log "Ê®°ÂùóÁ≥ªÁªüÂàùÂßãÂåñÊàêÂäü" || debug_log "Ê®°ÂùóÁ≥ªÁªüÂàùÂßãÂåñÂ§±Ë¥•Ôºå‰ΩøÁî®ÂÜÖÁΩÆÂäüËÉΩ"

    # ËÆæÁΩÆÈÄÄÂá∫Êó∂ÊÅ¢Â§çÁªàÁ´Ø
    trap 'restore_terminal_state; exit' EXIT INT TERM

    # ÊØèÊó•È¶ñÊ¨°ÂêØÂä®Êó∂Ê£ÄÊü•Êõ¥Êñ∞ÔºàÂú®ËÆæÁΩÆÁªàÁ´ØÊ®°Âºè‰πãÂâçÔºâ
    check_for_updates

    # ÂºÄÂßãÂØºËà™ÔºàÊñ∞ÁöÑÈÄâÊã©Âô®‰∏çÈúÄË¶ÅÈ¢ÑÂÖàËÆæÁΩÆÁªàÁ´ØÊ®°ÂºèÔºâ
    handle_navigation
}

# ËøêË°å‰∏ªÂáΩÊï∞
main "$@"